const nkonsole = require( "nkonsole" )

const zalgo_up = [
	'\u030d', /*     Ãç     */ '\u030e', /*     Ãé     */ '\u0304', /*     ÃÑ     */ '\u0305', /*     ÃÖ     */
	'\u033f', /*     Ãø     */ '\u0311', /*     Ãë     */ '\u0306', /*     ÃÜ     */ '\u0310', /*     Ãê     */
	'\u0352', /*     Õí     */ '\u0357', /*     Õó     */ '\u0351', /*     Õë     */ '\u0307', /*     Ãá     */
	'\u0308', /*     Ãà     */ '\u030a', /*     Ãä     */ '\u0342', /*     ÕÇ     */ '\u0343', /*     ÕÉ     */
	'\u0344', /*     ÕÑ     */ '\u034a', /*     Õä     */ '\u034b', /*     Õã     */ '\u034c', /*     Õå     */
	'\u0303', /*     ÃÉ     */ '\u0302', /*     ÃÇ     */ '\u030c', /*     Ãå     */ '\u0350', /*     Õê     */
	'\u0300', /*     ÃÄ     */ '\u0301', /*     ÃÅ     */ '\u030b', /*     Ãã     */ '\u030f', /*     Ãè     */
	'\u0312', /*     Ãí     */ '\u0313', /*     Ãì     */ '\u0314', /*     Ãî     */ '\u033d', /*     ÃΩ     */
	'\u0309', /*     Ãâ     */ '\u0363', /*     Õ£     */ '\u0364', /*     Õ§     */ '\u0365', /*     Õ•     */
	'\u0366', /*     Õ¶     */ '\u0367', /*     Õß     */ '\u0368', /*     Õ®     */ '\u0369', /*     Õ©     */
	'\u036a', /*     Õ™     */ '\u036b', /*     Õ´     */ '\u036c', /*     Õ¨     */ '\u036d', /*     Õ≠     */
	'\u036e', /*     ÕÆ     */ '\u036f', /*     ÕØ     */ '\u033e', /*     Ãæ     */ '\u035b', /*     Õõ     */
	'\u0346', /*     ÕÜ     */ '\u031a' /*     Ãö     */
];

const zalgo_down = [
	'\u0316', /*     Ãñ     */ '\u0317', /*     Ãó     */ '\u0318', /*     Ãò     */ '\u0319', /*     Ãô     */
	'\u031c', /*     Ãú     */ '\u031d', /*     Ãù     */ '\u031e', /*     Ãû     */ '\u031f', /*     Ãü     */
	'\u0320', /*     Ã†     */ '\u0324', /*     Ã§     */ '\u0325', /*     Ã•     */ '\u0326', /*     Ã¶     */
	'\u0329', /*     Ã©     */ '\u032a', /*     Ã™     */ '\u032b', /*     Ã´     */ '\u032c', /*     Ã¨     */
	'\u032d', /*     Ã≠     */ '\u032e', /*     ÃÆ     */ '\u032f', /*     ÃØ     */ '\u0330', /*     Ã∞     */
	'\u0331', /*     Ã±     */ '\u0332', /*     Ã≤     */ '\u0333', /*     Ã≥     */ '\u0339', /*     Ãπ     */
	'\u033a', /*     Ã∫     */ '\u033b', /*     Ãª     */ '\u033c', /*     Ãº     */ '\u0345', /*     ÕÖ     */
	'\u0347', /*     Õá     */ '\u0348', /*     Õà     */ '\u0349', /*     Õâ     */ '\u034d', /*     Õç     */
	'\u034e', /*     Õé     */ '\u0353', /*     Õì     */ '\u0354', /*     Õî     */ '\u0355', /*     Õï     */
	'\u0356', /*     Õñ     */ '\u0359', /*     Õô     */ '\u035a', /*     Õö     */ '\u0323' /*     Ã£     */
];

const Astro = ['‚ôàÔ∏è','‚ôçÔ∏è','‚ôåÔ∏è','‚ôãÔ∏è','‚ôäÔ∏è','‚ôâÔ∏è','‚ôéÔ∏è','‚ôèÔ∏è','‚ôêÔ∏è','‚ôëÔ∏è','‚ôíÔ∏è'];

const seps = [ ' ', '  ', [ ' /', '/ ' ]
		, [ ')', '(' ]
		, [ '\' ' ]
	]
	/*[ '\'' ]
	, [ '-' ]
	, [ '‚Ä¢' ]
	, [ '=' ]
	, [ '?' ]
	, [ '^' ]
	, [ '@' ]
	, [ '&' ]
	, [ '#' ]
	, [ '~' ]
	, [ '' ]
	, [ '7' ]
	, [ '|' ]
	, [ '.' ]
	, [ '+' ]
	, [ ' ' ]
	, [ '\t' ]
	, [ '\\' ]
	, [ '"', '"' ]
	, [ '(', ')' ]
	, [ '[', ']' ]
	, [ '/', '/' ]
	, [ '<', '>' ]
	, [ '>', '<' ]
	, [ 'q', 'p' ]
	, [ '?', ':' ]
	*/

/*const Alphabet = [
	'‚òá', '‚òà', '‚òâ', '‚òä', '‚òã', '‚òå', '‚òç'
	, ' ò', ' í', ' û', '…Å', 'Œü', 'Œî', 'œ¥', 'œ†', 'œæ', 'Œì', '‘µ', '◊°'
]*/

const fixes = [ '‚à¥', '‚àµ', '‚àô' ];

const faces = ['üòÄ','üòÅ','üòÇ','üòÉ','üòÑ','üëø','üòà','üòá','üòÜ','üòÖ','üòâ','üòä','üòã','üòå','üòë','üòê','üòè','üòé','üòç','üòí','üòì','üòî','üòï','üòñ','üòõ','üòö','üòô','üòò','üòó','üòú','üòû','üòû','üòü','üò†','üò•','üò§','üò£','üò¢','üò°','üò¶','üòß','üò®','üò©','üò™','üòØ','üòÆ','üò≠','üò¨','üò´','üò∞','üò±','üò≤','üò≥']
const Alphabet=faces
const sexs = [ '‚ôÄ', '‚ôÇ'  ]

const roleEmojis = {
    'harvester':'‚ôü',
    'worker':'‚öí',
    'gatherer':'‚ôû',
    'upgrader':'‚ôú'
}
function getRoleEmoji(role){
    if(roleEmojis[role]!=null)
    return roleEmojis[role]
    return ''
}

function randVal( arr ) {
	if( arr == null ) throw 'arr required to get a randVal'
	return arr[ Math.floor( Math.random() * arr.length ) ]
}

function getRandomfix() {
	const nb = Math.ceil( Math.max( 0, Math.random() * 13 - 11 ) )
	let ret = '';
	for( var i = 0; i < nb; i++ ) {
		ret += randVal( fixes );
	}
	return ret;
}

function randZalgUp() {
	return randVal( zalgo_up ); //zalgo_up[ Math.floor( zalgo_up.length * Math.rand() ) ]
}

function randZalgDown() {
	return randVal( zalgo_down ); //zalgo_up[ Math.floor( zalgo_up.length * Math.rand() ) ]
}

function zalgo( txt, nb = 50 ) {
	if( nb <= 0 ) return txt
	if( typeof ( txt[ 0 ] ) == 'object' ) {
		let ln = 0
		const base = nb / txt.length
		let ret = []

		for( const i in txt ) {
			const rand = Math.random()
			let myln = Math.min(
				nb - ln, Math.floor(
					0.33 * ( base ) +
					( 0.66 * ( base ) * rand ) )
			)
			ret.push( zalgo( txt[ i ], myln ) )
			ln += Math.max( 0, myln )
		}

		return ret
	}
	return _zalgo( txt, nb )
}

function _zalgo( txt, nb ) {
	let zalgosUP = [];
	let zalgosDOWN = [];
	let len = 0;
	if( len >= nb ) return txt;
	if( txt == null || txt.length == null || txt.length == 0 ) return txt
	tout: while( true ) {
		for( let c in txt ) {
			const up = Math.random() > 0.5
			if( up && zalgosUP[ c ] == null ) {
				zalgosUP[ c ] = '';
			}
			if( !up && zalgosDOWN[ c ] == null ) {
				zalgosDOWN[ c ] = '';
			}
			const car = ( up ) ? randZalgUp() : randZalgDown()
			if( len + car.length > nb )
				break tout;
			if( up )
				zalgosUP[ c ] += '' + car;
			else
				zalgosDOWN[ c ] += '' + car;
			len += car.length;
			if( len >= nb )
				break tout;

		}
	}
	let ret = [];
	ret.push( getRandomfix() )
	for( const c in txt ) {
		if( zalgosUP[ c ] != null )
			ret.push( zalgosUP[ c ] )
		ret.push( txt[ c ] );
		if( zalgosDOWN[ c ] != null )
			ret.push( zalgosDOWN[ c ] )
	}
	ret.push( getRandomfix() )
	return ret;
}

function getRandomSeps( i = 1 ) {
	let nb = 0;
	let ret = [];
	while( ret.length < i ) {
		let randomSeps = []
		let len
		do {
			len = 0
			randomSeps = randVal( seps )
			for( const y in randomSeps ) {
				len += randomSeps[ y ].length
			}
		} while ( len + nb > i )
		for( const x in randomSeps )
			ret.push( randomSeps[ x ] );
	}
	return ret
}

function getAstro() {
	const nbMystic = Math.floor( Game.time / 666 )
	const nbCycle = Astro.length
	const n = nbMystic % nbCycle
	return Astro[ n ]
}

function getSex( arr ) {
	return randVal( sexs );
}

function getBaseNameWord( x ) {
	let ret = []
	for( var i = 0; i < x; i++ ) {
		ret.push( randVal( Alphabet ) );
	}
	return ret
}

function getBaseName( y = 1, minx = 6, maxx = 12 ) {
	//console.log( 'getBaseName( y = ' + y + ', minx = ' + minx + ', maxx = ' + maxx + ' )' )
	let ret = []
	for( var i = 0; i < y; i++ ) {
		const nb = ( Math.random() * ( maxx - minx ) ) + minx
		ret.push( getBaseNameWord( nb ) );
		//console.log( nb, ret );
	}
	return ret
}

function testName( name ) {
	if( name == null ) throw 'name must not be null'
	for( var i in Game.creeps ) {
		if( i == name ) return false;
	}
	return true
}

function getCreepyName( plus = '') {
	let ret
	do {
		ret = ''
		let nb = 0
		nb += 2 // spaces  
		const nbWanted = 1 + Math.floor( 3 * Math.random() )
		const astro = getAstro();
		nb += astro.length
		const sex = getSex();
		nb += sex.length

		const nbmots = Math.max( 1 + Math.floor( ( Math.random() - 0.5 ) * 3 ), 1 )
		const moyParMot = ( nbWanted ) / nbmots
		const minParMots = Math.max( 1, Math.floor( moyParMot - 0.4 * moyParMot ) )
		const maxParMots = Math.min( 5, Math.floor( moyParMot + 0.4 * moyParMot ) )

		const baseName = getBaseName( nbmots, minParMots, maxParMots );
		for( const i in baseName ) {
			const baseNameWord = baseName[ i ]
			for( const j in baseNameWord ) {
				if( baseNameWord[ j ] != null && baseNameWord[ j ].length != 0 )
					nb += baseNameWord[ j ][ 0 ].length
			}
		}

		const randomSeps = getRandomSeps( baseName.length - 1 );
		for( i in randomSeps ) {
			nb += randomSeps[ i ].length
		}
		//console.log( baseName, nb )

		const zalgoName = zalgo( baseName, Math.max( nbWanted * 1, Math.min( nbWanted * 4, 40 - nb ) ) )
			//console.log( zalgo( baseName, 25 - nb ) )
		for( i in randomSeps ) {
			nb += randomSeps[ i ].length
		}

		ret += astro + ' '
		for( const i in zalgoName ) {
			const zalgoNameWord = zalgoName[ i ]
			for( const j in zalgoNameWord ) {
				ret += zalgoNameWord[ j ]
			}
			//if( zalgoName[ i ].length != null )
			if( randomSeps[ i ] != null )
				ret += randomSeps[ i ]
		}
		ret += ' '+plus + sex
			//console.log( ret )
		return ret
	} while ( !testName( ret ) )
	return ret
}

module.exports = {
	getCreepyName: function (plus) {
		return getCreepyName(plus)
	}
	,
	getRoleEmoji: function(role){
	    return getRoleEmoji(role)
	}
}
